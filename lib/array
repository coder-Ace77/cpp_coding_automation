template <typename T>
class Array{
    public:
    vector<T> v,pre;

    Array() : v(), pre() {} // Default constructor    

    Array(int n,T vl){
        v.resize(n,vl);
    }
    T& operator [](int ind){
        return v.at(ind);
    }

    int size(){
        return v.size();
    } 

    bool empty(){
        return v.empty();
    }

    void push_back(T val){
        v.push_back(val);
    }

    void sort(function<bool(T,T)> cmp = less<T>()){
        std::sort(v.begin(),v.end());
    }

    T max(){
        return (*max_element(v.begin(),v.end()));
    }

    T min(){
        return (*min_element(v.begin(),v.end()));
    }

    T sum(){
        return accumulate(v.begin(),v.end(),0ll);
    }

    void build(){
        pre.resize(v.size(),0);
        T s=0;
        for(int i=0;i<pre.size();i++){
            if(i==0)pre.at(i)=v.at(i);
            else pre.at(i)=pre.at(i-1)+v.at(i);
        }

    }

    T qry(int l,int r){
        if(l==0)return pre.at(r);
        else return pre.at(r)-pre.at(l-1);
    }

    void clear(){
        v.clear();
    }

};
