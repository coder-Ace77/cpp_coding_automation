#define f(n) for(int i=0;i<n;i++)
#define fr(i,a,b) for(int i=a;i<=b;i+=1)
#define ceil(a,b) (a+b-1)/b
#define ll long long int
#define vi vector<int>
#define vll vector<long long int>
#define all(x) x.begin(), x.end()
#define sz(x) (int)x.size()
#define pii pair<int,int>
#define pll pair<ll,ll>
#define pb push_back
#define F first
#define S second
#define strend string::npos
#define mod 1000000007
#define MAXN 200005
#define inf (int)1e9
#define infll (ll)1e18
#define PRECISION 6
#define endl '\n'
#define debug(...) debug_impl(#__VA_ARGS__, __VA_ARGS__)

template<typename... Args>
void debug_impl(const char* names, Args&&... args) {
    cout << names << " = ";
    ((cout << args << " "), ...); 
    cout << endl;
}

template <typename T>
class Array{
    public:
    vector<T> v,pre;

    Array() : v(), pre() {} // Default constructor    

    Array(int n,T vl){
        v.resize(n,vl);
    }

    Array(vector<T> a){
        v=a;
    }

    T& operator [](int ind){
        return v.at(ind);
    }

    int size(){
        return v.size();
    } 

    bool empty(){
        return v.empty();
    }

    void push_back(T val){
        v.push_back(val);
    }

    void sort(function<bool(T,T)> cmp = less<T>()){
        std::sort(v.begin(),v.end());
    }

    T max(){
        return (*max_element(v.begin(),v.end()));
    }

    T min(){
        return (*min_element(v.begin(),v.end()));
    }

    T sum(){
        return accumulate(v.begin(),v.end(),0ll);
    }

    void build(){
        pre.resize(v.size(),0);
        T s=0;
        for(int i=0;i<pre.size();i++){
            if(i==0)pre.at(i)=v.at(i);
            else pre.at(i)=pre.at(i-1)+v.at(i);
        }

    }

    T qry(int l,int r){
        if(l==0)return pre.at(r);
        else return pre.at(r)-pre.at(l-1);
    }

    void clear(){
        v.clear();
    }

};


template <typename T>
typename std::enable_if<!std::is_class<T>::value>::type debugv(const T& t) {
    std::cout << t << " ";
}

void debugv(const std::string& t) {
    std::cout << "\"" << t << "\" ";
}

template <typename T, size_t N>
void debugv(const T (&arr)[N]) {
    std::cout << "[ ";
    for (const auto& elem : arr) {
        debugv(elem);
    }
    std::cout << "] ";
}

template <typename T>
typename std::enable_if<std::is_class<T>::value>::type debugv(const T& container) {
    std::cout << "[ ";
    for (const auto& elem : container) {
        debugv(elem);
    }
    std::cout << "]";
}

template <typename K, typename V>
void debugv(const std::map<K, V>& m) {
    std::cout << "{ ";
    for (const auto& pair : m) {
        std::cout << "(";
        debugv(pair.first);
        std::cout << ": ";
        debugv(pair.second);
        std::cout << ") ";
    }
    std::cout << "} ";
}

template <typename T>
void debugv(const Array<T>& arr){
    debugv(arr.v);
}
