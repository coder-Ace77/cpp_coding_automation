template <typename T>
typename std::enable_if<!std::is_class<T>::value>::type debugv(const T& t) {
    std::cout << t << " ";
}

void debugv(const std::string& t) {
    std::cout << "\"" << t << "\" ";
}

template <typename T, size_t N>
void debugv(const T (&arr)[N]) {
    std::cout << "[ ";
    for (const auto& elem : arr) {
        debugv(elem);
    }
    std::cout << "] ";
}

template <typename T>
typename std::enable_if<std::is_class<T>::value>::type debugv(const T& container) {
    std::cout << "[ ";
    for (const auto& elem : container) {
        debugv(elem);
    }
    std::cout << "]";
}

template <typename K, typename V>
void debugv(const std::map<K, V>& m) {
    std::cout << "{ ";
    for (const auto& pair : m) {
        std::cout << "(";
        debugv(pair.first);
        std::cout << ": ";
        debugv(pair.second);
        std::cout << ") ";
    }
    std::cout << "} ";
}

template <typename T>
void debugv(const Array<T>& arr){
    debugv(arr.v);
}
