class Trie{
    class Node{
        public:
        bool is_end=false;
        map<char,Node*> links;
    }; 
    Node* root;
    Trie(){
        root = new Node();
    }

    void insert(string &s){
        Node* curr = root;
        for(char ch:s){
            if(curr->links.count(ch)==0){
                curr->links[ch]=new Node();
            }
            curr = curr->links[ch];
        }
        curr->is_end = true;
    }

    bool search(string &s){
        Node* curr = root;
        for(char ch:s){
            if(curr->links.count(ch)==0){
                return false;
            }
            curr = curr->links[ch];
        }
        return curr->is_end;
    }

    bool prefix(string &s){
        Node* curr = root;
        for(char ch:s){
            if(curr->links.count(ch)==0){
                return false;
            }
            curr = curr->links[ch];
        }
        return true;
    }
};