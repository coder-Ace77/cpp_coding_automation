class NumberTheory{
    public:
    static long long binpow(long long a, long long b, long long m){
        a%=m;
        long long ans = 1;
        while(b>0){
            if (b & 1)ans=ans*a%m;
            a=a*a%m;
            b>>=1;
        }
        return ans;
    }

    static long long inv(long long a,long long m){
        return binpow(a,m-2,m);
    }

    static int gcd (int a, int b) {
        return (b ? gcd (b, a % b) : a);
    }

    static int lcm(int a,int b){
        return a/gcd(a, b)*b;
    }

    static int extended_eucledian(int a, int b, int& x, int& y){
        if (b == 0) {
            x = 1;
            y = 0;
            return a;
        }
        int x1, y1;
        int d = extended_eucledian(b, a % b, x1, y1);
        x = y1;
        y = x1 - y1 * (a / b);
        return d;
    }



    static vector<int> sieve(int n){
        vector<int> sv(n+1,true);
        sv[0]=sv[1]=false;
        for (int i=2;i*i<=n;i++){
            if(sv[i]){
                for (int j=i*i;j<=n;j+=i)
                    sv[j] = false;
            }
        }
        return sv;
    }

    static int phi(int n){
        int ans = n;
        for(int i=2; i*i<=n;i++){
            if (n%i==0){
                while(n%i==0)n/=i;
                ans-=ans/i;
            }
        }
        if(n>1)ans-=ans/n;
        return ans;
    }

    static vector<int> phi_1_to_n(int n){
        vector<int> phi(n+1);
        for (int i=0;i<=n;i++)phi[i]=i;
        for (int i=2;i<=n;i++){
            if(phi[i]==i){
                for (int j=i;j<=n;j+=i)
                    phi[j]-=phi[j]/i;
            }
        }
        return phi;
    }

    

};
