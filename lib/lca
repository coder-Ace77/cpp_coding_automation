class LCA{
    public:
    vector<vector<int>> adj;
    vector<vector<int>> anc;
    vector<int> depth;
    int n;

    LCA(int nn){
        n = nn;
        adj.resize(n);
        anc.resize(n, vector<int>(20,0));
        depth.resize(n,0);
    }

    void dfs(int node, int par){
        anc[node][0] = par;
        for(int b = 1; b < 20; b++){
            anc[node][b] = (anc[node][b-1] == -1 ? -1 : anc[anc[node][b-1]][b-1]);
        }
        for(auto ch:adj[node]){
            if(ch != par){
                depth[ch] = depth[node] + 1;
                dfs(ch,node);
            }
        }
    }

    void build_from_parent(vector<int> &par){
        for(int i = 0; i < n; i++){
            anc[i][0] = par[i];
        }
        for(int b = 1; b < 20; b++){
            for(int i = 0; i < n; i++){
                anc[i][b] = (anc[i][b-1] == -1 ? -1 : anc[anc[i][b-1]][b-1]);
            }
        }
    }

    int kth_anc(int node, int k){
        int curr = node;
        for(int b = 19; b >= 0 && curr >= 0; b--){
            if(k & (1 << b)){
                curr = anc[curr][b];
                if(curr == -1) break;
            }
        }
        return curr;
    }

    int lca(int a,int b){
        if(depth[a]<depth[b])swap(a,b);
        int k = depth[a] - depth[b];
        a = kth_anc(a,k);
        if(a==b)return a;
        for(int j=18;j>=0;j--){
            if(anc[a][j]!=anc[b][j]){
                a = anc[a][j];
                b = anc[b][j];
            }
        }
        return anc[a][0];
    }

    int dist(int a,int b){
        int la = lca(a,b);
        return (depth[a]+depth[b]-2*depth[la]);
    }
};
